name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest  
            rust: beta

    continue-on-error: ${{ matrix.experimental || false }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ferro/target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('ferro/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-stable-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable'
      working-directory: ferro
      run: cargo fmt --all -- --check

    - name: Run clippy
      working-directory: ferro
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build (debug)
      working-directory: ferro
      run: cargo build --verbose

    - name: Build (release)
      working-directory: ferro
      run: cargo build --release --verbose

    - name: Run tests
      working-directory: ferro
      run: cargo test --verbose

    - name: Run tests (release mode)
      working-directory: ferro
      run: cargo test --release --verbose

    - name: Check documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      working-directory: ferro
      run: cargo doc --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      working-directory: ferro
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ferro/lcov.info
        fail_ci_if_error: false

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ferro/target
        key: ubuntu-latest-bench-cargo-${{ hashFiles('ferro/Cargo.lock') }}

    - name: Run benchmarks
      working-directory: ferro
      run: |
        # Add benchmarks when available
        echo "Benchmarks would run here"
        # cargo bench --no-run

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      working-directory: ferro
      run: cargo audit

  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-hack
      uses: taiki-e/install-action@cargo-hack

    - name: Check minimal versions
      working-directory: ferro
      run: |
        cargo update -Z minimal-versions
        cargo hack check --all-features

  dependency-check:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/dependency-review-action@v3

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust 1.70  # Adjust based on your MSRV
      uses: dtolnay/rust-toolchain@1.70

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ferro/target
        key: msrv-cargo-${{ hashFiles('ferro/Cargo.lock') }}

    - name: Check MSRV
      working-directory: ferro
      run: cargo check --all-features
