name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: 'false'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ferro-windows-x64.exe
            path: ferro/target/x86_64-pc-windows-msvc/release/ferro.exe
          - target: i686-pc-windows-msvc
            os: windows-latest 
            name: ferro-windows-x86.exe
            path: ferro/target/i686-pc-windows-msvc/release/ferro.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: ferro-windows-arm64.exe
            path: ferro/target/aarch64-pc-windows-msvc/release/ferro.exe
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ferro-linux-x64
            path: ferro/target/x86_64-unknown-linux-gnu/release/ferro
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ferro-macos-x64
            path: ferro/target/x86_64-apple-darwin/release/ferro
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ferro-macos-arm64
            path: ferro/target/aarch64-apple-darwin/release/ferro

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('ferro/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: ferro/target
        key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('ferro/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.target }}-

    - name: Build binary
      working-directory: ferro
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: strip ${{ matrix.path }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.path }}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ferro/target
        key: test-cargo-${{ hashFiles('ferro/Cargo.lock') }}

    - name: Run tests
      working-directory: ferro
      run: cargo test --verbose

    - name: Run clippy
      working-directory: ferro
      run: cargo clippy -- -D warnings

    - name: Check formatting
      working-directory: ferro
      run: cargo fmt -- --check

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        find . -type f -exec sha256sum {} \; > ../checksums.txt
        
    - name: Get tag name
      id: tag_name
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "TAG_NAME=manual-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        name: Ferro ${{ steps.tag_name.outputs.TAG_NAME }}
        body: |
          # Ferro ${{ steps.tag_name.outputs.TAG_NAME }}
          
          Cross-platform Windows ISO downloader - Rust rewrite of Fido
          
          ## üì¶ Downloads
          
          ### ü™ü Windows
          - **ferro-windows-x64.exe** - Windows 64-bit (Intel/AMD)
          - **ferro-windows-x86.exe** - Windows 32-bit (Intel/AMD)  
          - **ferro-windows-arm64.exe** - Windows ARM64
          
          ### üêß Linux
          - **ferro-linux-x64** - Linux 64-bit (Intel/AMD)
          
          ### üçé macOS
          - **ferro-macos-x64** - macOS 64-bit (Intel)
          - **ferro-macos-arm64** - macOS ARM64 (Apple Silicon)
          
          ## üöÄ Usage
          
          ```bash
          # Show help
          ./ferro --help
          
          # List available Windows versions
          ./ferro list versions
          
          # Download Windows 11
          ./ferro download --version "Windows 11"
          ```
          
          ## üîí Verification
          
          SHA256 checksums are provided in `checksums.txt`.
        files: |
          artifacts/ferro-windows-x64.exe/ferro.exe
          artifacts/ferro-windows-x86.exe/ferro.exe
          artifacts/ferro-windows-arm64.exe/ferro.exe
          artifacts/ferro-linux-x64/ferro
          artifacts/ferro-macos-x64/ferro
          artifacts/ferro-macos-arm64/ferro
          checksums.txt
        draft: false
        prerelease: false

    # All files are uploaded via the softprops/action-gh-release action above
